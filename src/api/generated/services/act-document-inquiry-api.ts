/* tslint:disable */
/* eslint-disable */
/**
 * API Piattaforma Notifiche
 * # Interface definition for Piattaforma Notifiche ## changelog   * ### 0.1     * First draft   * ### 0.2     * Second draft   * ### 1.0     * First version 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ActInquiryResponse } from '../types';
/**
 * ActDocumentInquiryApi - axios parameter creator
 * @export
 */
export const ActDocumentInquiryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * API utilizzata per la verifica della presenza a sistema di atti e attestazioni.
         * @param {string} uid Identificativo del client giustapposizione dei campi frazionario-pdl-timestamp
         * @param {string} recipientTaxId Codice Fiscale Destinatario
         * @param {'PF' | 'PG'} recipientType Sigla, Persona fisica o giuridica
         * @param {string} qrCode Qr Code presente sull\&#39;avviso di Avvenuta ricezione
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        actInquiry: async (uid: string, recipientTaxId: string, recipientType: 'PF' | 'PG', qrCode: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('actInquiry', 'uid', uid)
            // verify required parameter 'recipientTaxId' is not null or undefined
            assertParamExists('actInquiry', 'recipientTaxId', recipientTaxId)
            // verify required parameter 'recipientType' is not null or undefined
            assertParamExists('actInquiry', 'recipientType', recipientType)
            // verify required parameter 'qrCode' is not null or undefined
            assertParamExists('actInquiry', 'qrCode', qrCode)
            const localVarPath = `/radd-private/api/v1/act/inquiry`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (recipientTaxId !== undefined) {
                localVarQueryParameter['recipientTaxId'] = recipientTaxId;
            }

            if (recipientType !== undefined) {
                localVarQueryParameter['recipientType'] = recipientType;
            }

            if (qrCode !== undefined) {
                localVarQueryParameter['qrCode'] = qrCode;
            }

            if (uid != null) {
                localVarHeaderParameter['uid'] = String(uid);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ActDocumentInquiryApi - functional programming interface
 * @export
 */
export const ActDocumentInquiryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ActDocumentInquiryApiAxiosParamCreator(configuration)
    return {
        /**
         * API utilizzata per la verifica della presenza a sistema di atti e attestazioni.
         * @param {string} uid Identificativo del client giustapposizione dei campi frazionario-pdl-timestamp
         * @param {string} recipientTaxId Codice Fiscale Destinatario
         * @param {'PF' | 'PG'} recipientType Sigla, Persona fisica o giuridica
         * @param {string} qrCode Qr Code presente sull\&#39;avviso di Avvenuta ricezione
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async actInquiry(uid: string, recipientTaxId: string, recipientType: 'PF' | 'PG', qrCode: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActInquiryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.actInquiry(uid, recipientTaxId, recipientType, qrCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ActDocumentInquiryApi - factory interface
 * @export
 */
export const ActDocumentInquiryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ActDocumentInquiryApiFp(configuration)
    return {
        /**
         * API utilizzata per la verifica della presenza a sistema di atti e attestazioni.
         * @param {string} uid Identificativo del client giustapposizione dei campi frazionario-pdl-timestamp
         * @param {string} recipientTaxId Codice Fiscale Destinatario
         * @param {'PF' | 'PG'} recipientType Sigla, Persona fisica o giuridica
         * @param {string} qrCode Qr Code presente sull\&#39;avviso di Avvenuta ricezione
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        actInquiry(uid: string, recipientTaxId: string, recipientType: 'PF' | 'PG', qrCode: string, options?: any): AxiosPromise<ActInquiryResponse> {
            return localVarFp.actInquiry(uid, recipientTaxId, recipientType, qrCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ActDocumentInquiryApi - object-oriented interface
 * @export
 * @class ActDocumentInquiryApi
 * @extends {BaseAPI}
 */
export class ActDocumentInquiryApi extends BaseAPI {
    /**
     * API utilizzata per la verifica della presenza a sistema di atti e attestazioni.
     * @param {string} uid Identificativo del client giustapposizione dei campi frazionario-pdl-timestamp
     * @param {string} recipientTaxId Codice Fiscale Destinatario
     * @param {'PF' | 'PG'} recipientType Sigla, Persona fisica o giuridica
     * @param {string} qrCode Qr Code presente sull\&#39;avviso di Avvenuta ricezione
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActDocumentInquiryApi
     */
    public actInquiry(uid: string, recipientTaxId: string, recipientType: 'PF' | 'PG', qrCode: string, options?: AxiosRequestConfig) {
        return ActDocumentInquiryApiFp(this.configuration).actInquiry(uid, recipientTaxId, recipientType, qrCode, options).then((request) => request(this.axios, this.basePath));
    }
}
