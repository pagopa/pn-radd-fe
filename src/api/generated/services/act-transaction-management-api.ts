/* tslint:disable */
/* eslint-disable */
/**
 * API Piattaforma Notifiche
 * # Interface definition for Piattaforma Notifiche ## changelog   * ### 0.1     * First draft   * ### 0.2     * Second draft   * ### 1.0     * First version 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AbortTransactionRequest } from '../types';
// @ts-ignore
import { AbortTransactionResponse } from '../types';
// @ts-ignore
import { ActStartTransactionRequest } from '../types';
// @ts-ignore
import { CompleteTransactionRequest } from '../types';
// @ts-ignore
import { CompleteTransactionResponse } from '../types';
// @ts-ignore
import { StartTransactionResponse } from '../types';
/**
 * ActTransactionManagementApi - axios parameter creator
 * @export
 */
export const ActTransactionManagementApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * API utilizzata per la notifica  dell\'annullamento dell\'operazione di consegna dell\'atto e delle eventuali attestazioni.
         * @param {string} uid Identificativo del client giustapposizione dei campi frazionario-pdl-timestamp
         * @param {AbortTransactionRequest} abortTransactionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abortActTransaction: async (uid: string, abortTransactionRequest: AbortTransactionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('abortActTransaction', 'uid', uid)
            // verify required parameter 'abortTransactionRequest' is not null or undefined
            assertParamExists('abortActTransaction', 'abortTransactionRequest', abortTransactionRequest)
            const localVarPath = `/radd-private/api/v1/act/transaction/abort`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (uid != null) {
                localVarHeaderParameter['uid'] = String(uid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(abortTransactionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API utilizzata per la notifica del completamento dell\'operazione di consegna dell\'atto e delle eventuali attestazioni.
         * @param {string} uid Identificativo del client giustapposizione dei campi frazionario-pdl-timestamp
         * @param {CompleteTransactionRequest} completeTransactionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeActTransaction: async (uid: string, completeTransactionRequest: CompleteTransactionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('completeActTransaction', 'uid', uid)
            // verify required parameter 'completeTransactionRequest' is not null or undefined
            assertParamExists('completeActTransaction', 'completeTransactionRequest', completeTransactionRequest)
            const localVarPath = `/radd-private/api/v1/act/transaction/complete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (uid != null) {
                localVarHeaderParameter['uid'] = String(uid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(completeTransactionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API utilizzata per la richiesta di avvio dell\'operazione di scaricamento e consegna dell\'atto e delle eventuali attestazioni.
         * @param {string} uid Identificativo del client giustapposizione dei campi frazionario-pdl-timestamp
         * @param {ActStartTransactionRequest} actStartTransactionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startActTransaction: async (uid: string, actStartTransactionRequest: ActStartTransactionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uid' is not null or undefined
            assertParamExists('startActTransaction', 'uid', uid)
            // verify required parameter 'actStartTransactionRequest' is not null or undefined
            assertParamExists('startActTransaction', 'actStartTransactionRequest', actStartTransactionRequest)
            const localVarPath = `/radd-private/api/v1/act/transaction/start`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)

            if (uid != null) {
                localVarHeaderParameter['uid'] = String(uid);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(actStartTransactionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ActTransactionManagementApi - functional programming interface
 * @export
 */
export const ActTransactionManagementApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ActTransactionManagementApiAxiosParamCreator(configuration)
    return {
        /**
         * API utilizzata per la notifica  dell\'annullamento dell\'operazione di consegna dell\'atto e delle eventuali attestazioni.
         * @param {string} uid Identificativo del client giustapposizione dei campi frazionario-pdl-timestamp
         * @param {AbortTransactionRequest} abortTransactionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abortActTransaction(uid: string, abortTransactionRequest: AbortTransactionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AbortTransactionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.abortActTransaction(uid, abortTransactionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API utilizzata per la notifica del completamento dell\'operazione di consegna dell\'atto e delle eventuali attestazioni.
         * @param {string} uid Identificativo del client giustapposizione dei campi frazionario-pdl-timestamp
         * @param {CompleteTransactionRequest} completeTransactionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async completeActTransaction(uid: string, completeTransactionRequest: CompleteTransactionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompleteTransactionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.completeActTransaction(uid, completeTransactionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API utilizzata per la richiesta di avvio dell\'operazione di scaricamento e consegna dell\'atto e delle eventuali attestazioni.
         * @param {string} uid Identificativo del client giustapposizione dei campi frazionario-pdl-timestamp
         * @param {ActStartTransactionRequest} actStartTransactionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startActTransaction(uid: string, actStartTransactionRequest: ActStartTransactionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StartTransactionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startActTransaction(uid, actStartTransactionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ActTransactionManagementApi - factory interface
 * @export
 */
export const ActTransactionManagementApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ActTransactionManagementApiFp(configuration)
    return {
        /**
         * API utilizzata per la notifica  dell\'annullamento dell\'operazione di consegna dell\'atto e delle eventuali attestazioni.
         * @param {string} uid Identificativo del client giustapposizione dei campi frazionario-pdl-timestamp
         * @param {AbortTransactionRequest} abortTransactionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abortActTransaction(uid: string, abortTransactionRequest: AbortTransactionRequest, options?: any): AxiosPromise<AbortTransactionResponse> {
            return localVarFp.abortActTransaction(uid, abortTransactionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * API utilizzata per la notifica del completamento dell\'operazione di consegna dell\'atto e delle eventuali attestazioni.
         * @param {string} uid Identificativo del client giustapposizione dei campi frazionario-pdl-timestamp
         * @param {CompleteTransactionRequest} completeTransactionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeActTransaction(uid: string, completeTransactionRequest: CompleteTransactionRequest, options?: any): AxiosPromise<CompleteTransactionResponse> {
            return localVarFp.completeActTransaction(uid, completeTransactionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * API utilizzata per la richiesta di avvio dell\'operazione di scaricamento e consegna dell\'atto e delle eventuali attestazioni.
         * @param {string} uid Identificativo del client giustapposizione dei campi frazionario-pdl-timestamp
         * @param {ActStartTransactionRequest} actStartTransactionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startActTransaction(uid: string, actStartTransactionRequest: ActStartTransactionRequest, options?: any): AxiosPromise<StartTransactionResponse> {
            return localVarFp.startActTransaction(uid, actStartTransactionRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ActTransactionManagementApi - object-oriented interface
 * @export
 * @class ActTransactionManagementApi
 * @extends {BaseAPI}
 */
export class ActTransactionManagementApi extends BaseAPI {
    /**
     * API utilizzata per la notifica  dell\'annullamento dell\'operazione di consegna dell\'atto e delle eventuali attestazioni.
     * @param {string} uid Identificativo del client giustapposizione dei campi frazionario-pdl-timestamp
     * @param {AbortTransactionRequest} abortTransactionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActTransactionManagementApi
     */
    public abortActTransaction(uid: string, abortTransactionRequest: AbortTransactionRequest, options?: AxiosRequestConfig) {
        return ActTransactionManagementApiFp(this.configuration).abortActTransaction(uid, abortTransactionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API utilizzata per la notifica del completamento dell\'operazione di consegna dell\'atto e delle eventuali attestazioni.
     * @param {string} uid Identificativo del client giustapposizione dei campi frazionario-pdl-timestamp
     * @param {CompleteTransactionRequest} completeTransactionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActTransactionManagementApi
     */
    public completeActTransaction(uid: string, completeTransactionRequest: CompleteTransactionRequest, options?: AxiosRequestConfig) {
        return ActTransactionManagementApiFp(this.configuration).completeActTransaction(uid, completeTransactionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API utilizzata per la richiesta di avvio dell\'operazione di scaricamento e consegna dell\'atto e delle eventuali attestazioni.
     * @param {string} uid Identificativo del client giustapposizione dei campi frazionario-pdl-timestamp
     * @param {ActStartTransactionRequest} actStartTransactionRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActTransactionManagementApi
     */
    public startActTransaction(uid: string, actStartTransactionRequest: ActStartTransactionRequest, options?: AxiosRequestConfig) {
        return ActTransactionManagementApiFp(this.configuration).startActTransaction(uid, actStartTransactionRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
