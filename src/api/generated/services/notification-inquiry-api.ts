/* tslint:disable */
/* eslint-disable */
/**
 * API Piattaforma Notifiche
 * # Interface definition for Piattaforma Notifiche ## changelog   * ### 0.1     * First draft   * ### 0.2     * Second draft   * ### 1.0     * First version 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FilterRequest } from '../types';
// @ts-ignore
import { OperationActResponse } from '../types';
// @ts-ignore
import { OperationAorResponse } from '../types';
// @ts-ignore
import { OperationsActDetailsResponse } from '../types';
// @ts-ignore
import { OperationsAorDetailsResponse } from '../types';
// @ts-ignore
import { OperationsResponse } from '../types';
/**
 * NotificationInquiryApi - axios parameter creator
 * @export
 */
export const NotificationInquiryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * API utilizzata per il recupero di tutte le pratiche legate ad atti opponibili ai terzi ed associate ad uno specifico internal id
         * @param {string} internalId Internal recipient or delegate tax id
         * @param {FilterRequest} [filterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActPracticesByInternalId: async (internalId: string, filterRequest?: FilterRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'internalId' is not null or undefined
            assertParamExists('getActPracticesByInternalId', 'internalId', internalId)
            const localVarPath = `/radd-private/api/v1/act/operations/by-internalId/{internalId}`
                .replace(`{${"internalId"}}`, encodeURIComponent(String(internalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(filterRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API utilizzata per il recupero di tutte le pratiche legate ad atti opponibili ai terzi ed associate ad uno specifico iun
         * @param {string} iun Identification code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActPracticesByIun: async (iun: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iun' is not null or undefined
            assertParamExists('getActPracticesByIun', 'iun', iun)
            const localVarPath = `/radd-private/api/v1/act/operations/by-iun/{iun}`
                .replace(`{${"iun"}}`, encodeURIComponent(String(iun)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API utilizzata per il recupero di una transazione legata ad un atto opponibille ai terzi
         * @param {string} operationId Id della pratica
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActTransactionByOperationId: async (operationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'operationId' is not null or undefined
            assertParamExists('getActTransactionByOperationId', 'operationId', operationId)
            const localVarPath = `/radd-private/api/v1/act/operations/by-id/{operationId}`
                .replace(`{${"operationId"}}`, encodeURIComponent(String(operationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API utilizzata per il recupero di tutte le pratiche legate ad AAR ed associate ad uno specifico internal id
         * @param {string} internalId Internal recipient or delegate tax id
         * @param {FilterRequest} [filterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAorPracticesByInternalId: async (internalId: string, filterRequest?: FilterRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'internalId' is not null or undefined
            assertParamExists('getAorPracticesByInternalId', 'internalId', internalId)
            const localVarPath = `/radd-private/api/v1/aor/operations/by-internalId/{internalId}`
                .replace(`{${"internalId"}}`, encodeURIComponent(String(internalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(filterRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API utilizzata per il recupero di tutte le pratiche legate ad un AAR ed associate ad uno specifico iun
         * @param {string} iun Identification code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAorPracticesByIun: async (iun: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'iun' is not null or undefined
            assertParamExists('getAorPracticesByIun', 'iun', iun)
            const localVarPath = `/radd-private/api/v1/aor/operations/by-iun/{iun}`
                .replace(`{${"iun"}}`, encodeURIComponent(String(iun)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API utilizzata per il recupero di una transazione legata ad un AAR
         * @param {string} operationId Id della pratica
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAorTransactionByOperationId: async (operationId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'operationId' is not null or undefined
            assertParamExists('getAorTransactionByOperationId', 'operationId', operationId)
            const localVarPath = `/radd-private/api/v1/aor/operations/by-id/{operationId}`
                .replace(`{${"operationId"}}`, encodeURIComponent(String(operationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication APIKeyAuth required
            await setApiKeyToObject(localVarHeaderParameter, "x-api-key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationInquiryApi - functional programming interface
 * @export
 */
export const NotificationInquiryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotificationInquiryApiAxiosParamCreator(configuration)
    return {
        /**
         * API utilizzata per il recupero di tutte le pratiche legate ad atti opponibili ai terzi ed associate ad uno specifico internal id
         * @param {string} internalId Internal recipient or delegate tax id
         * @param {FilterRequest} [filterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActPracticesByInternalId(internalId: string, filterRequest?: FilterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OperationsActDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getActPracticesByInternalId(internalId, filterRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API utilizzata per il recupero di tutte le pratiche legate ad atti opponibili ai terzi ed associate ad uno specifico iun
         * @param {string} iun Identification code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActPracticesByIun(iun: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OperationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getActPracticesByIun(iun, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API utilizzata per il recupero di una transazione legata ad un atto opponibille ai terzi
         * @param {string} operationId Id della pratica
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getActTransactionByOperationId(operationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OperationActResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getActTransactionByOperationId(operationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API utilizzata per il recupero di tutte le pratiche legate ad AAR ed associate ad uno specifico internal id
         * @param {string} internalId Internal recipient or delegate tax id
         * @param {FilterRequest} [filterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAorPracticesByInternalId(internalId: string, filterRequest?: FilterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OperationsAorDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAorPracticesByInternalId(internalId, filterRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API utilizzata per il recupero di tutte le pratiche legate ad un AAR ed associate ad uno specifico iun
         * @param {string} iun Identification code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAorPracticesByIun(iun: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OperationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAorPracticesByIun(iun, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API utilizzata per il recupero di una transazione legata ad un AAR
         * @param {string} operationId Id della pratica
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAorTransactionByOperationId(operationId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OperationAorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAorTransactionByOperationId(operationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NotificationInquiryApi - factory interface
 * @export
 */
export const NotificationInquiryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotificationInquiryApiFp(configuration)
    return {
        /**
         * API utilizzata per il recupero di tutte le pratiche legate ad atti opponibili ai terzi ed associate ad uno specifico internal id
         * @param {string} internalId Internal recipient or delegate tax id
         * @param {FilterRequest} [filterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActPracticesByInternalId(internalId: string, filterRequest?: FilterRequest, options?: any): AxiosPromise<OperationsActDetailsResponse> {
            return localVarFp.getActPracticesByInternalId(internalId, filterRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * API utilizzata per il recupero di tutte le pratiche legate ad atti opponibili ai terzi ed associate ad uno specifico iun
         * @param {string} iun Identification code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActPracticesByIun(iun: string, options?: any): AxiosPromise<OperationsResponse> {
            return localVarFp.getActPracticesByIun(iun, options).then((request) => request(axios, basePath));
        },
        /**
         * API utilizzata per il recupero di una transazione legata ad un atto opponibille ai terzi
         * @param {string} operationId Id della pratica
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getActTransactionByOperationId(operationId: string, options?: any): AxiosPromise<OperationActResponse> {
            return localVarFp.getActTransactionByOperationId(operationId, options).then((request) => request(axios, basePath));
        },
        /**
         * API utilizzata per il recupero di tutte le pratiche legate ad AAR ed associate ad uno specifico internal id
         * @param {string} internalId Internal recipient or delegate tax id
         * @param {FilterRequest} [filterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAorPracticesByInternalId(internalId: string, filterRequest?: FilterRequest, options?: any): AxiosPromise<OperationsAorDetailsResponse> {
            return localVarFp.getAorPracticesByInternalId(internalId, filterRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * API utilizzata per il recupero di tutte le pratiche legate ad un AAR ed associate ad uno specifico iun
         * @param {string} iun Identification code
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAorPracticesByIun(iun: string, options?: any): AxiosPromise<OperationsResponse> {
            return localVarFp.getAorPracticesByIun(iun, options).then((request) => request(axios, basePath));
        },
        /**
         * API utilizzata per il recupero di una transazione legata ad un AAR
         * @param {string} operationId Id della pratica
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAorTransactionByOperationId(operationId: string, options?: any): AxiosPromise<OperationAorResponse> {
            return localVarFp.getAorTransactionByOperationId(operationId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NotificationInquiryApi - object-oriented interface
 * @export
 * @class NotificationInquiryApi
 * @extends {BaseAPI}
 */
export class NotificationInquiryApi extends BaseAPI {
    /**
     * API utilizzata per il recupero di tutte le pratiche legate ad atti opponibili ai terzi ed associate ad uno specifico internal id
     * @param {string} internalId Internal recipient or delegate tax id
     * @param {FilterRequest} [filterRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationInquiryApi
     */
    public getActPracticesByInternalId(internalId: string, filterRequest?: FilterRequest, options?: AxiosRequestConfig) {
        return NotificationInquiryApiFp(this.configuration).getActPracticesByInternalId(internalId, filterRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API utilizzata per il recupero di tutte le pratiche legate ad atti opponibili ai terzi ed associate ad uno specifico iun
     * @param {string} iun Identification code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationInquiryApi
     */
    public getActPracticesByIun(iun: string, options?: AxiosRequestConfig) {
        return NotificationInquiryApiFp(this.configuration).getActPracticesByIun(iun, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API utilizzata per il recupero di una transazione legata ad un atto opponibille ai terzi
     * @param {string} operationId Id della pratica
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationInquiryApi
     */
    public getActTransactionByOperationId(operationId: string, options?: AxiosRequestConfig) {
        return NotificationInquiryApiFp(this.configuration).getActTransactionByOperationId(operationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API utilizzata per il recupero di tutte le pratiche legate ad AAR ed associate ad uno specifico internal id
     * @param {string} internalId Internal recipient or delegate tax id
     * @param {FilterRequest} [filterRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationInquiryApi
     */
    public getAorPracticesByInternalId(internalId: string, filterRequest?: FilterRequest, options?: AxiosRequestConfig) {
        return NotificationInquiryApiFp(this.configuration).getAorPracticesByInternalId(internalId, filterRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API utilizzata per il recupero di tutte le pratiche legate ad un AAR ed associate ad uno specifico iun
     * @param {string} iun Identification code
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationInquiryApi
     */
    public getAorPracticesByIun(iun: string, options?: AxiosRequestConfig) {
        return NotificationInquiryApiFp(this.configuration).getAorPracticesByIun(iun, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API utilizzata per il recupero di una transazione legata ad un AAR
     * @param {string} operationId Id della pratica
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationInquiryApi
     */
    public getAorTransactionByOperationId(operationId: string, options?: AxiosRequestConfig) {
        return NotificationInquiryApiFp(this.configuration).getAorTransactionByOperationId(operationId, options).then((request) => request(this.axios, this.basePath));
    }
}
